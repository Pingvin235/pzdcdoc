apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'eclipse'
apply plugin: 'idea'

repositories {
    mavenLocal()
    mavenCentral()
}

buildDir = 'target'
version = '2.1'
sourceCompatibility = 11
targetCompatibility = 11

ext.admin = hasProperty('sonatypeUsername')
ext.docBranch = project.hasProperty('docBranch') ? project.findProperty('docBranch') : 'master'
ext.docSrcDir = "${buildDir}/doc-src"
ext.docOutDir = "${buildDir}/doc-out"

eclipse {
    classpath {
        // enable here source download if needed
        downloadJavadoc = false
        downloadSources = false
    }
}

idea {
    module {}
}

configurations {
    all {
        transitive = false
    }
    // for demo build
    pzdcdoc {
        transitive = true
    }
}

// https://tomgregory.com/gradle-implementation-vs-compile-dependencies/
dependencies {
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-io:commons-io:2.9.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.14.1'
    runtimeOnly 'org.apache.logging.log4j:log4j-core:2.14.1'
    implementation 'org.jsoup:jsoup:1.13.1'
    implementation 'org.asciidoctor:asciidoctorj-api:2.5.1'
    runtimeOnly 'org.asciidoctor:asciidoctorj:2.5.1'
    // version 2.1.2 places resulting PNG files in the project root, that brakes generation
    runtimeOnly 'org.asciidoctor:asciidoctorj-diagram:1.5.18'
    runtimeOnly 'com.beust:jcommander:1.78'
    runtimeOnly 'org.jruby:jruby-complete:9.2.17.0'
    implementation 'org.dom4j:dom4j:2.1.3'
    runtimeOnly 'jaxen:jaxen:1.2.0'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.12.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'
    implementation 'com.squareup.okhttp3:okhttp:3.14.9'
    implementation 'com.squareup.okio:okio:1.17.2'
    implementation 'args4j:args4j:2.33'

    testImplementation 'junit:junit:4.13.2'
    testRuntimeOnly 'org.hamcrest:hamcrest-core:1.3'

    // for demo build
    pzdcdoc "org.pzdcdoc:pzdcdoc:${project.version}"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

test {
    testLogging {
        showStandardStreams = true
        exceptionFormat = "full"
        events "passed", "skipped", "failed"
    }
    outputs.upToDateWhen {false}
}

defaultTasks 'clean', 'buildDemoDocLocal'

task buildDemoDocLocal(type:JavaExec, dependsOn: ['compileJava']) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.pzdcdoc.DocGenerator'
    args 'NOTUSED', 'src/doc', docOutDir
}

task checkoutDemoDoc(type: Exec, dependsOn: ['clean']) {
    commandLine 'git', 'clone', 'https://github.com/Pingvin235/pzdcdoc.git', docSrcDir, '--depth', '1', '--branch', "${docBranch}"
}

// Sample of generation out of branch:
// gradlew buildDemoDoc -PdocBranch=i5-diagrams
task buildDemoDoc(type:JavaExec, dependsOn: ['checkoutDemoDoc', 'publishToMavenLocal']) {
    classpath = configurations.pzdcdoc
    main = 'org.pzdcdoc.DocGenerator'
    args 'NOTUSED', docSrcDir, docOutDir
}

// Sample of generation out of branch:
// bash -c "./gradlew publishDemoDoc -PdocBranch=i5-diagrams"
task publishDemoDoc(dependsOn: 'buildDemoDoc') {
    doFirst {
        def command = "rsync --delete -Pav target/doc-out/ pzdcdoc@bgerp.org:/home/pzdcdoc/www/demo"
        println "Running: $command"
        println command.execute().text
    }
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives sourceJar
    archives javadocJar
}

signing {
    required { admin }
    sign configurations.archives
}

// https://medium.com/@nmauti/publishing-a-project-on-maven-central-8106393db2c3
// https://medium.com/@nmauti/sign-and-publish-on-maven-central-a-project-with-the-new-maven-publish-gradle-plugin-22a72a4bfd4b

/*
  Local publishing:
    gradlew publishToMavenLocal
  To Sonatype:
    gradlew publish -PsonatypeUsername=LOGIN -PsonatypePassword=PSWD
    log in to https://oss.sonatype.org/#stagingRepositories using LOGIN and PSWD
    find a new staging repo, check content and 'Close'
    wait for all close checks in 'Activity' and 'Release' the repo
*/

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'org.pzdcdoc'
            artifactId 'pzdcdoc'
            version "${project.version}"
                    
            from components.java

            if (admin) {
                customizePom(pom)
                
                // create the sign pom artifact
                pom.withXml {
                    def pomFile = file("${project.buildDir}/generated-pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                }
                
                artifact(sourceJar) {
                    classifier = 'sources'
                }
                artifact(javadocJar) {
                    classifier = 'javadoc'
                }
                
                // create the signed artifacts
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username findProperty('sonatypeUsername')
                password findProperty('sonatypePassword')
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()
        
        // change packaging from pom
        root.packaging[0].value = 'jar'

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'AsciiDoctor based documentation generation tool'
            name 'PzdcDoc'
            url 'https://github.com/Pingvin235/pzdcdoc'
            organization {
                name 'org.pzdcdoc'
                url 'https://pzdcdoc.org'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/Pingvin235/pzdcdoc/issues'
            }
            licenses {
                license {
                    name 'MIT License'
                    url 'https://github.com/Pingvin235/pzdcdoc/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/Pingvin235/pzdcdoc'
                connection 'scm:git:git://github.com/Pingvin235/pzdcdoc.git'
                developerConnection 'scm:git:ssh://git@github.com:pzdcdoc/pzdcdoc.git'
            }
            developers {
                developer {
                    name 'Shamil Vakhitov'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}
